name: Build image and deploy to ECS (no local installs)

on:
  push:
    branches: [ main ]

jobs:
  build-push-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write       # needed for OIDC
      contents: read
    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      REPO_NAME: dotnet-8-samples
      PROJECT: src/YourWebProject/YourWebProject.csproj   # <-- change this
      TAG: v${{ github.run_number }}

    steps:
      - uses: actions/checkout@v4

      # Authenticate to AWS via OIDC role
      - uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: ${{ env.AWS_REGION }}
          role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}

      - name: Get Account ID
        id: acct
        run: echo "ACCOUNT_ID=$(aws sts get-caller-identity --query Account --output text)" >> $GITHUB_OUTPUT

      - name: Ensure ECR repo exists
        run: |
          aws ecr describe-repositories --repository-names $REPO_NAME --region $AWS_REGION >/dev/null 2>&1 \
          || aws ecr create-repository --repository-name $REPO_NAME --region $AWS_REGION

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region $AWS_REGION \
          | docker login --username AWS --password-stdin ${{ steps.acct.outputs.ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      # Build a container image WITHOUT Dockerfile (uses .NET 8 container publish)
      - name: Publish container image
        run: |
          REGISTRY=${{ steps.acct.outputs.ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          dotnet publish "$PROJECT" -c Release \
            -p:PublishProfile=DefaultContainer \
            -p:ContainerImageName=$REPO_NAME \
            -p:ContainerImageTag=$TAG \
            -p:ContainerRegistry=$REGISTRY

      - name: Push to ECR
        run: |
          REGISTRY=${{ steps.acct.outputs.ACCOUNT_ID }}.dkr.ecr.$AWS_REGION.amazonaws.com
          docker push $REGISTRY/$REPO_NAME:$TAG

      # (Optional) Roll the ECS service to the new image
      - name: Force new ECS deployment
        if: ${{ secrets.ECS_CLUSTER && secrets.ECS_SERVICE }}
        run: |
          aws ecs update-service \
            --cluster "${{ secrets.ECS_CLUSTER }}" \
            --service "${{ secrets.ECS_SERVICE }}" \
            --force-new-deployment
